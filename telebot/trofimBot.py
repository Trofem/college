'''
    –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ telebot. –ù–∞–ø–∏—Å–∞–Ω @TrofimAl
    –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞: @trofem_bot
'''
from dotenv import dotenv_values
import telebot as tb
import random, requests

TOKEN:str = '' # –ö–ª—é—á –±—ã–ª —É–±—Ä–∞–Ω —Ä–∞–¥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ò –∫—Å—Ç–∞, —Å—Ç–∞—Ä—ã–π —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, —Ç–∞–∫ —á—Ç–æ ):
bot = tb.TeleBot(TOKEN)

class TrofimBot:
    # Keyboard Markups (TG)
    markup_main = None
    markup_rps = None
    mark_combined = None

    bot_commands = {
        # –æ–±—ã—á–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–º–∞–Ω–¥—ã
        "start": {"label":"–ù–∞—á–∞–ª–æ –±–æ—Ç–∞", "content": "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"}, 
        "help": {"label": "–ü–æ–º–æ—â—å"}, # –∫–æ–Ω—Ç–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
        "info": {"label": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ", "content": "–î–∞–Ω–Ω—ã–π –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —á–µ–ª–æ–º: @TrofimAl, –ê–ª—ë—à–∏–Ω –¢—Ä–æ—Ñ–∏–º –ü–ö–°-12."}, 
        'api': {"label": "–¢–µ—Å—Ç apiüìß", "content": "–ë—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É—è –∑–∞–ø—Ä–æ—Å —Å –º–æ–µ–≥–æ API:"},
        # —Å–∫—Ä—ã—Ç—ã–µ –ø—Å–µ–≤–¥–æ –∫–æ–º–º–∞–Ω–¥—ã
        "back": {"label":"–ù–∞–∑–∞–¥"},
        "rpc": {"label":"ü™®‚úÇÔ∏èüßª"},
        "rock": {"label":"–ö–∞–º–µ–Ω—åü™®"}, "paper": {"label":"–ë—É–º–∞–≥–∞üßª"}, "scissors": {"label":"–ù–æ–∂–Ω–∏—Ü—ã‚úÇÔ∏è"}
    }
    bot_commands_length = 4 #—Å–∫–æ–ª—å–∫–æ –∏–∑ –∫–æ–º–º–∞–Ω–¥ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ [0:—á–∏—Å–ª–æ]

    telegram_api_url = 'https://bunker-generator-trofim.vercel.app/api/character?json'

    def __init__(self):
        
        self.create_markup()
        self.register_handlers()
        bot.polling()

    
    def create_markup(self):
        ''' –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–∏—Å–∞ –º–µ–Ω—é'''
        #   [–ü–æ–º–æ—â—å]  [–ò–Ω—Ñ–æ]
        #   [ü™®‚úÇÔ∏èüßª] [api]
        self.markup_main = tb.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

        self.markup_main.row( 
            tb.types.KeyboardButton(self.bot_commands["help"]['label']),
            tb.types.KeyboardButton(self.bot_commands["info"]['label']) 
        )

        self.markup_main.row(
            tb.types.KeyboardButton( self.bot_commands["rpc"]['label']),
            tb.types.KeyboardButton( self.bot_commands["api"]['label']) 
        )

        # [–ö–∞–º–µ–Ω—åü™®] [–ù–æ–∂–Ω–∏—Ü—ã‚úÇÔ∏è] [–ë—É–º–∞–≥–∞üßª]
        self.markup_rps = tb.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        self.markup_rps.row( 
            tb.types.KeyboardButton(self.bot_commands["rock"]['label']), 
            tb.types.KeyboardButton(self.bot_commands["scissors"]['label']),
            tb.types.KeyboardButton(self.bot_commands["paper"]['label'])
        )

        self.mark_combined = self.markup_rps
        self.mark_combined.add(self.bot_commands["back"]['label'])

    def register_handlers(self):

        @bot.message_handler(commands=['start'])
        def send_start(message): 
            ''' –ù–∞—á–∞–ª–æ –±–æ—Ç–∞ '''
            bot.reply_to(message, self.bot_commands["start"]["content"], reply_markup=self.markup_main)

        @bot.message_handler(commands=['help'])
        def send_help(message):
            ''' –í—Å–µ –∫–æ–º–º–∞–Ω–¥—ã '''
            bot.reply_to(
                message, 
                '\n'.join( 
                    [f"/{act} - {info['label']}" for act, info in list(self.bot_commands.items())[ 0:(self.bot_commands_length) ]] 
                ), 
                reply_markup=self.markup_main
            )

        @bot.message_handler(commands=['info'])
        def send_info(message):
            ''' –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ '''
            bot.reply_to(message, self.bot_commands["info"]["content"], reply_markup=self.markup_main)
        
        @bot.message_handler(commands=['api'])
        def send_api_request(message):
            ''' –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ '''
            api_request = requests.get(self.telegram_api_url).json()
            res = f"  - {'\n - '.join([ f"{fact}: {content}" for fact, content in api_request.items()])}\n - {self.bot_commands['api']['content']}\n - {self.telegram_api_url}"
            
            bot.reply_to(message, res, reply_markup=self.markup_main)


        @bot.message_handler(commands=['rpc_start'])
        def send_rock_paper_scissors_start(message):
            '''–ù–ê–ß–ê–õ–û –ö–∞–º–µ–Ω—å –Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–∂–∫–∞'''

            bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=self.markup_rps)

        @bot.message_handler(commands=['rpc_end'])
        def send_rock_paper_scissors_end(message, item):
            ''' –ö–û–ù–ï–¶ –ö–∞–º–µ–Ω—å –Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–∂–∫–∞'''
            enemy_item = random.choice(["rock", "paper", "scissors"])
            result = None if (item == enemy_item) else True if (
                (item == "rock" and enemy_item == "scissors") or (item == "paper" and enemy_item == "rock") or (item == "scissors" and enemy_item == "paper")
            ) else False
            result_text = f"- –ò–≥—Ä–æ–∫: {self.bot_commands[item]['label']}\n- –ø—Ä–æ—Ç–∏–≤\n- –ë–æ—Ç: {self.bot_commands[enemy_item]['label']}.\n- {
                ('–í—ã–π–≥—Ä–∞–ª '+ ('–∏–≥—Ä–æ–∫' if result else '–±–æ—Ç')  if result != None else '–ù–∏—á—å—è')
            }"
            
            bot.reply_to(message, result_text, reply_markup=self.mark_combined)
            print(item, enemy_item, result, "–†–∞–≤–Ω—ã?" + item == enemy_item )

        @bot.message_handler(func=lambda message: True)
        def message_comparator(message):
            ''' –ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–º–º–∞–Ω–¥, –∞ —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏, –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–º–º–∞–Ω–¥—ã '''
            actions_dict = {
                "–ù–∞–∑–∞–¥": send_start, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ": send_info, "–ü–æ–º–æ—â—å": send_help, "ü™®‚úÇÔ∏èüßª": send_rock_paper_scissors_start,
                self.bot_commands["api"]['label']: send_api_request,
                self.bot_commands['rock']['label']: lambda m: send_rock_paper_scissors_end(m, "rock"),
                self.bot_commands['paper']['label']: lambda m: send_rock_paper_scissors_end(m, "paper"),
                self.bot_commands['scissors']['label']: lambda m: send_rock_paper_scissors_end(m, "scissors")
            } 

            _text = message.text.strip().capitalize()
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: " + _text)


            if _text in actions_dict:
                actions_dict[_text](message)
                return

            match _text:
                case _ if _text[0] == "/":
                    bot.reply_to(message, "–î–∞–Ω–Ω–æ–π –∫–æ–º–º–∞–Ω–¥—ã –Ω–µ—Ç—É. –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
                case _:
                    #—ç—Ö–æ!
                    bot.reply_to(message, f"–≠—Ö–æ: {_text}")

        

trofimBot = TrofimBot()
